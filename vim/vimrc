set nocompatible    " be iMproved or for Neovim, required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug (Minimalist Vim Plugin Manager)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Automatic installation
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://gitee.com/jarsonfang/vim-plug/raw/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
"call plug#begin('~/.vim/plugged')
call plug#begin('~/.vim/bundle')

source ~/.vim/common/common_plugins.vim

Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'scrooloose/syntastic'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh'  }
" Plug 'ycm-core/YouCompleteMe', { 'do': 'git submodule update --init --recursive' }

" Initialize plugin system
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Common Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=dark
" set background=light

source ~/.vim/common/common_settings.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Common Plugin Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
source ~/.vim/common/common_plugin_settings.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SuperTab
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Manual (see :help supertab)
"
" make YCM compatible with Ultisnips
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = '<C-N>'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ultisnips
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Manual (see :help UltiSnips)
"
let g:UltiSnipsExpandTrigger       = '<TAB>'
let g:UltiSnipsJumpForwardTrigger  = '<TAB>'
let g:UltiSnipsJumpBackwardTrigger = '<S-TAB>'
let g:UltiSnipsSnippetDirectories =
            \ ["~/.vim/snippets", "~/.vim/bundle/vim-snippets/UltiSnips"]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Manual (see :help syntastic and :help syntastic-checkers)
"
let g:syntastic_error_symbol = '✗>'
let g:syntastic_warning_symbol = '*>'
let g:syntastic_python_checkers=['pyflakes', 'pep8']

let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_include_dirs = ['/usr/include/']
let g:syntastic_enable_balloons = 1 "whether to show balloons

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-cpp-enhanced-highlight
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
let c_no_curly_error=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LeaderF
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" don't show the help in normal mode
let g:Lf_HideHelp = 1

" Show icons, icons are shown by default
let g:Lf_ShowDevIcons = 0

" preview the result in a popup window
let g:Lf_PreviewInPopup = 1

let g:Lf_UseCache = 0
let g:Lf_IgnoreCurrentBufferName = 1

let g:Lf_ShortcutF = "<leader>ff"
noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
" noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR>
noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>

" search visually selected text literally
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
noremap go :<C-U>Leaderf! rg --recall<CR>

" mannually generate gtags by using `Leaderf gtags --update` command
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_GtagsAutoUpdate = 1

" By default, gtags supports C, C++, Yacc, Java, PHP and Assembly
" programming language. If you want to support other programming languages,
" you can install the pygments package by command `pip install pygments` and
" set this option as "native-pygments".
" Default value is "default".
let g:Lf_Gtagslabel = 'native-pygments'

" noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

let g:Lf_WildIgnore = {
            \ 'dir': ['.svn','.git','.hg', '.ccls-cache'],
            \ 'file': ['*.sw?','~$*','*.bak','*.o','*.py[co]']
            \}

let g:Lf_MruWildIgnore = {
            \ 'dir': ['.svn','.git','.hg', '.ccls-cache'],
            \ 'file': ['*.sw?','~$*','*.bak','*.o','*.py[co]']
            \}

let g:Lf_MruFileExclude = ['*.so', '*.a']

let g:Lf_StlSeparator = { 'left': '', 'right': '' }

let g:Lf_RootMarkers = ['.git', '.hg', '.svn']
let g:Lf_WorkingDirectoryMode = 'Ac'

" Command       Description
" <Esc>         quit from LeaderF
" <C-R>         switch between fuzzy search mode and regex mode
" <C-F>         switch between full path search mode and name only search mode
" <C-J>         move the cursor downward in the result window
" <C-K>         move the cursor upward in the result window
" <C-P>         preview the result
" <Home>        move the cursor to the begin of the prompt
" <End>         move the cursor to the end of the prompt
" <Up> / <Down> recall last/next input pattern from history

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Manual (see :help youcompleteme)
"
set completeopt=longest,menu

" let g:ycm_rust_src_path = '/usr/local/src/rust/src'
let g:ycm_server_python_interpreter = 'python3'

let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_tags_files = 1
"let g:ycm_key_invoke_completion = '<C-Space>' " Default
"let g:ycm_key_detailed_diagnostics = '<Leader>d' " Default
let g:ycm_key_list_select_completion = ['<C-N>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-P>', '<Up>']

let g:ycm_confirm_extra_conf = 1
" let g:ycm_extra_conf_globlist = []
let g:ycm_global_ycm_extra_conf = '~/.vim/scripts/ycm_extra_conf.py'

"Note that you can install YCM with both **libclang** and **clangd** enabled.
"In that case **clangd** will be preferred unless you have the following in your 'vimrc':

" let g:ycm_use_clangd = 0

"There are 2 methods which can be used to provide compile flags to clang:
"Option 1: Use a compilation database
"
" The easiest way to get YCM to compile your code is to use a compilation
" database. A compilation database is usually generated by your build system
" (e.g. 'CMake') and contains the compiler invocation for each compilation unit
" in your project.

" For information on how to generate a compilation database, see the clang
" documentation. In short:

" - If using CMake, add '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON' when configuring
"   (or add 'set( CMAKE_EXPORT_COMPILE_COMMANDS ON )' to 'CMakeLists.txt') and
"   copy or symlink the generated database to the root of your project.

" - For other build systems, check out '.ycm_extra_conf.py' below. Note that
"   **experimental** 'clangd'-based completer doesn't support this option. So
"   it only applies to 'libclang'-based completer.

"Option 2: Provide the flags manually

nnoremap <Leader>qf :YcmCompleter FixIt<CR>
nnoremap <Leader>fx :YcmCompleter FixIt<CR>

nnoremap <Leader>gt :YcmCompleter GoTo<CR>
nnoremap <Leader>gd :YcmCompleter GetDoc<CR>
nnoremap <Leader>gi :YcmCompleter GoToInclude<CR>

" use keymaps of nvim
nnoremap <silent>gt :YcmCompleter GoTo<CR>
nnoremap <silent>gd :YcmCompleter GoTo<CR>
nnoremap <silent>gi :YcmCompleter GoToInclude<CR>

inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

